<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BazarServer.Infrastructure</name>
    </assembly>
    <members>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.GetCommandAsync_WithCache(System.String,System.Int32)">
            <summary>
            with cache. null will not cache.
            </summary>
            <param name="commandID"></param>
            <param name="cacheMilli"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.GetCommandAsync(System.String)">
            <summary>
            no memcache
            </summary>
            <param name="commandID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.SaveCommandAsync(BazarServer.Entity.Storage.UserCommand)">
            <summary>
            save command to mongodb
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.Batch(System.Int64,System.Int32)">
            <summary>
            return those command.receiveOffset > lastOffset, max count forwardCount
            result will not include lastOffset.
            </summary>
            <param name="lastOffset"></param>
            <param name="forwardCount"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.GetNextReceiveOffset">
            <summary>
            every command will be assigned a increasing receiveOffset
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.SaveFailure(BazarServer.Entity.Storage.UserCommand,System.String)">
            <summary>
            on error, save command to failure table
            </summary>
            <param name="cmd"></param>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.ICommandRepository.GetLastReceiveOffset">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostsByUserAsync(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            get posts of one user. latest at top.
            </summary>
            <param name="userID"></param>
            <param name="onlyOriginalPost"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostStatisticAsync(System.String)">
            <summary>
            return null if not found
            </summary>
            <param name="postID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.TimelineAsync(System.Int32,System.Int32)">
            <summary>
            timeline of all known posts. latest at top.
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.SaveAsync(BazarServer.Entity.Storage.Post)">
            <summary>
            upsert
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.UpsertPostStatisticAsync(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            update or insert
            </summary>
            <param name="postID"></param>
            <param name="addReplyCount"></param>
            <param name="addRepostCount"></param>
            <param name="addLikeCount"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.UpsertPostMeta(BazarServer.Entity.Storage.PostMeta)">
            <summary>
            update or insert
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.Search(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ay"></param>
            <param name="startIdx"></param>
            <param name="endIdx"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostMeta(System.String)">
            <summary>
            
            </summary>
            <param name="postID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.IsExistPostAsync(System.String)">
            <summary>
            deleted post is also exist.
            </summary>
            <param name="postID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostLikeAsync(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            return if user had liked these posts.
            </summary>
            <param name="userID"></param>
            <param name="postIDs"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostLikeAsync(System.String,System.String)">
            <summary>
            return likeID or ""
            </summary>
            <param name="userID"></param>
            <param name="postID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetRepliesAsync(System.String,System.Int32,System.Int32)">
            <summary>
            get direct replies for the post
            </summary>
            <param name="postID"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetPostsAsync(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="postIDs"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IPostRepository.GetRandomPost(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserInfoAsync_WithCache(System.String,System.Int32)">
            <summary>
            null will not cache
            </summary>
            <param name="userID"></param>
            <param name="cacheMilli"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserFollowers(System.String,System.Int32,System.Int32)">
            <summary>
            get the list of followers
            </summary>
            <param name="userID"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserFollowees(System.String,System.Int32,System.Int32)">
            <summary>
            get the list of followees
            </summary>
            <param name="userID"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.Search(System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="ay"></param>
            <param name="startIdx"></param>
            <param name="endIdx"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserFollowing(System.String,System.String)">
            <summary>
            get the record of one following
            </summary>
            <param name="userID"></param>
            <param name="targetID">userID or channelID</param>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.AddUserNotify(BazarServer.Entity.Storage.NotifyMessage)">
            <summary>
            
            </summary>
            <param name="notifyMessage"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserNotify(System.String,System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="userID"></param>
            <param name="startTime">startTime (include) of backwards</param>
            <param name="backwardCount"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.TryUpdateNotifyGetTime(System.String,System.Int64)">
            <summary>
            update NotifyGetTime if bigger
            </summary>
            <param name="userID"></param>
            <param name="getTime"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetNewNotifyCount(System.String)">
            <summary>
            get notify count since last NotifyGetTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.IUserRepository.GetUserLikes(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="userID"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Repository.PostRepository.TimelineAsync(System.Int32,System.Int32)">
            <summary>
            get latest posts
            </summary>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.AddAsync(`0)">
            <summary>
            beware! use Upsert instead!
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            return first document that satisfy filter, or default value.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            remove all documents that satisfy filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0)">
            <summary>
            update
            </summary>
            <param name="filter"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.UpsertAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},`0)">
            <summary>
            update or insert
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.GetQueryable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.InAsync``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            mongodb.linq do not support List.Contains, so we implement one.
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValues"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.InFilterAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="fieldName"></param>
            <param name="fieldValues"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.PageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            paging, you know
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="filter"></param>
            <param name="orderby"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <param name="descending"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            get list by filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            count by filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.Random(System.Int32)">
            <summary>
            get random documents from db.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IGenericMongoCollection`1.Search``1(System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            
            </summary>
            <param name="ay"></param>
            <param name="startIdx"></param>
            <param name="endIdx"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="T:BazarServer.Infrastructure.Storage.IMongoContext">
            <summary>
            will read config and construct MongoClient.
            </summary>
        </member>
        <member name="M:BazarServer.Infrastructure.Storage.IMongoContext.BuildIndex``1(System.String)">
            <summary>
            We don't use uniqueKey because of CosmosDB partition.
            We tolerate duplicate data for better performance and better capacity.
            We don't use transaction for the same reason.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
        </member>
    </members>
</doc>
