<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BazarServer.Application</name>
    </assembly>
    <members>
        <member name="M:BazarServer.Application.Commands.ICommandManager.SaveAndDispatch(BazarServer.Entity.Storage.UserCommand,System.String)">
            <summary>
            after command level verfication, save command and dispatch command to different processor
            </summary>
            <param name="cmd"></param>
            <param name="commandFrom">where is this command from, server BaseUrl or client IP</param>
            <returns></returns>
        </member>
        <member name="T:BazarServer.Application.Commands.MdtRequest`1">
            <summary>
            official process entrance of all ICommandContent, include DeleteCmd.
            ICommandContent may come from webapi controller, may come from peer server.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BazarServer.Application.Commands.MdtRequest`1.commandTime">
            <summary>
            milli seconds since epoch
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.MdtRequest`1.commandFrom">
            <summary>
            where is this command from, server BaseUrl or client IP
            </summary>
        </member>
        <member name="M:BazarServer.Application.Commands.MdtRequest`1.FromCommand``1(BazarServer.Entity.Storage.UserCommand,System.String)">
            <summary>
            will validate MdtRequest for commandID, commandTime, userID.
            will validate req.content model.
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="req"></param>
            <param name="commandFrom">where is this command from, server BaseUrl or client IP</param>
            <returns></returns>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.commandID">
            <summary>
            uniqueID of this command
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.commandTime">
            <summary>
            milliseconds since EPOCH
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.userID">
            <summary>
            who initiative this command
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.commandType">
            <summary>
            Post, Following, Repost, Like, Delete, etc...
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.version">
            <summary>
            added since v0.2
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.commandContent">
            <summary>
            a json string of this command detail content
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRequestModel.signature">
            <summary>
            signature of commandContent.
            signed by user with privateKey. can be verified by user publicKey.
            </summary>
        </member>
        <member name="F:BazarServer.Application.Commands.CommandErrorCode.Default">
            <summary>
            1-99 reserved
            </summary>
        </member>
        <member name="T:BazarServer.Application.Commands.UserCommandRespDto">
            <summary>
            response data for a command. usually lack of data. client should upload the necessary data and retry
            </summary>
        </member>
        <member name="P:BazarServer.Application.Commands.UserCommandRespDto.message">
            <summary>
            content depends on CommandErrorCode. usually the id of lack-resource
            </summary>
        </member>
        <member name="P:BazarServer.Application.Common.ApiResponse`1.success">
            <summary>
            success or not
            </summary>
        </member>
        <member name="P:BazarServer.Application.Common.ApiResponse`1.msg">
            <summary>
            variant message may change later.
            </summary>
        </member>
        <member name="P:BazarServer.Application.Common.ApiResponse`1.data">
            <summary>
            response data, maybe null on failure.
            </summary>
        </member>
        <member name="M:BazarServer.Application.PeerServers.IPeerManager.GetServerCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.IPeerManager.GetAllServers(System.Int32)">
            <summary>
            
            </summary>
            <param name="topNReputation">top N servers of highest Reputation</param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.IPeerManager.RegisterAsync(System.String)">
            <summary>
            some remote ask to register a new peer
            </summary>
            <param name="baseUrl"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.IPeerManager.Start">
            <summary>
            start a timer thread to sync data with peers
            </summary>
            <returns></returns>
        </member>
        <member name="F:BazarServer.Application.PeerServers.PeerManager.dicServerStats">
            <summary>
            server baseUrl as key
            </summary>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.Fetch(BazarServer.Application.PeerServers.PeerServerStat)">
            <summary>
            fetch data from one peer server
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.FetchServerListAsync(BazarServer.Application.PeerServers.PeerServerStat)">
            <summary>
            get peerlist from remote. try register self to the remote.
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.FetchCommandsAsync(BazarServer.Application.PeerServers.PeerServerStat)">
            <summary>
            retrieve commands from remote and update local
            </summary>
            <param name="pss"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.RegisterToRemoteAsync(BazarServer.Entity.Storage.PeerServer,System.String)">
            <summary>
            register baseUrl to a remote server
            </summary>
            <param name="server"></param>
            <param name="selfBaseUrl"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.GetPeerListAsync(BazarServer.Entity.Storage.PeerServer)">
            <summary>
            get peerList from one remote server
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.RandomRate(System.Double)">
            <summary>
            0.6 means 60% true
            </summary>
            <param name="publishRateNew"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.PeerServers.PeerManager.Peer_OnMessage(BazarServer.Application.PeerServers.PeerServerStat,BazarServer.Entity.Storage.UserCommand)">
            <summary>
            this function may be called in multi-thread
            </summary>
            <param name="stat"></param>
            <param name="cmdRemote"></param>
            <returns></returns>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.baseUrl">
            <summary>
            each peerServer need an unique baseUrl like "https://www.yourEntity.com/bazarserver/" or something
            </summary>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.Reputation">
            <summary>
            1 is max
            </summary>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.ReceiveCount">
            <summary>
            receive command count from peer. include dup and error
            </summary>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.ReceiveDupCount">
            <summary>
            already received from user or other peer
            </summary>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.ReceiveErrorCount">
            <summary>
            fail deserialize, no user, signature fail, spam fail, etc
            </summary>
        </member>
        <member name="P:BazarServer.Application.PeerServers.PeerServerDto.ReceiveOkCount">
            <summary>
            receive command count from peer. effective ones only.
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDetailDto.parent">
            <summary>
            maybe null if current is topmost
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDetailDto.thread">
            <summary>
            maybe null if current is topmost or parrent is topmost
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDetailDto.replies">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDto.liked">
            <summary>
            empty means not liked
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDto.replyToUser">
            <summary>
            userID of post.replyTo. empty if not reply to anyone
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.PostDto.bookmarked">
            <summary>
            
            </summary>
        </member>
        <member name="M:BazarServer.Application.Query.PostQueryFacade.GetPostDto(BazarServer.Infrastructure.Repository.IPostRepository,System.String,System.Collections.Generic.List{BazarServer.Entity.Storage.Post})">
            <summary>
            get PostDto based on Post. batch for better performance
            </summary>
            <param name="postRepository"></param>
            <param name="userID">from whose point of view</param>
            <param name="ay"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.Query.PostQueryFacade.GetUserLatestPosts_withCache(BazarServer.Infrastructure.Repository.IPostRepository,System.String)">
            <summary>
            get latest N posts of user
            </summary>
            <param name="postRepository"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.Query.PostQueryFacade.RemoveUserLatestPostsCache(System.String)">
            <summary>
            remove cache when mongodb has 'Post' change event
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:BazarServer.Application.Query.PostQueryFacade.GetLatestPostsByUsers(BazarServer.Infrastructure.Repository.IPostRepository,System.Collections.Generic.List{System.String},System.Int32,System.Int32)">
            <summary>
            return the top N posts of users. latest at top. with cache.
            </summary>
            <param name="postRepository"></param>
            <param name="userIDs"></param>
            <param name="page"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.Query.PostQueryFacade.GetRandomPostsWithCache(BazarServer.Infrastructure.Repository.IPostRepository,System.Int32)">
            <summary>
            get random posts with reasonable cache
            </summary>
            <param name="postRepository"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:BazarServer.Application.Query.UserDto">
            <summary>
            we don't return userPic directly for bandwidth consideration, there should be client side cache.
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.UserDto.userInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.UserDto.userStatistic">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Application.Query.UserDto.lastPicTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:BazarServer.Application.Query.UserQueryFacade.CheckQuery(BazarServer.Infrastructure.Repository.IUserRepository,System.String,System.Int64,System.String)">
            <summary>
            for some heavy or private query, we want to make sure the qurey comes from specific user
            </summary>
            <param name="userRepository"></param>
            <param name="userID"></param>
            <param name="queryTimestamp">time milli</param>
            <param name="queryToken"></param>
            <returns></returns>
        </member>
        <member name="M:BazarServer.Application.Query.UserQueryFacade.GetUserDto_WithCache(BazarServer.Infrastructure.Repository.IUserRepository,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="userRepository"></param>
            <param name="userID"></param>
            <param name="cacheMilli">millseconds that result will cache</param>
            <returns></returns>
        </member>
    </members>
</doc>
