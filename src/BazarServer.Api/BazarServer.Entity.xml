<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BazarServer.Entity</name>
    </assembly>
    <members>
        <member name="T:BazarServer.Entity.Commands.BookmarkCmd">
            <summary>
            userID+postID is unique
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.BookmarkCmd.postID">
            <summary>
            
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.ChannelCmd">
            <summary>
            group of users. like channel in telegram or list in twitter. 
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelCmd.channelID">
            <summary>
            uniqueID of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelCmd.channelName">
            <summary>
            displayName of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelCmd.description">
            <summary>
            
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.ChannelMemberCmd">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelMemberCmd.userID">
            <summary>
            who send this command
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelMemberCmd.cmID">
            <summary>
            uniqueID of this channel-member relationship
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelMemberCmd.channelID">
            <summary>
            uniqueID of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ChannelMemberCmd.memberID">
            <summary>
            whom to add to this channel
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.DeleteCmd">
            <summary>
            This is asking every related server to delete UGC, physically or logically.
            No one can ensure a deletion once published, including centralized platform, because third party would snapshot or record.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.DeleteCmd.deleteType">
            <summary>
            Post, Repost, Like, Following, etc
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.DeleteCmd.targetID">
            <summary>
            modelID of target
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.FollowingCmd">
            <summary>
            userID+targetID is unique.
            targetType is a describe info of targetID.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.FollowingCmd.targetType">
            <summary>
            "User" or "Channel"
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.ICommandContent">
            <summary>
            Indicate this is a UserCommand, need signature, serialize and storage.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ICommandContent.userID">
            <summary>
            who send out the commandID. who own the data.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ICommandContent.commandID">
            <summary>
            uniqueID of a userCommand. randstring(30)
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ICommandContent.commandTime">
            <summary>
            in milli seconds. user declare commandTime may not be true
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.ICommandContent.commandType">
            <summary>
            added since v0.2
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.LikeCmd">
            <summary>
            userID+postID is unique
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.LikeCmd.postID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.postID">
            <summary>
            unique ID of a post. reply/repost are also post. 
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.threadID">
            <summary>
            postID of the original post
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.replyTo">
            <summary>
            postID of which we reply to. we can reply to an original post or a reply
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.isRepost">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.content">
            <summary>
            content of a post. RTF 1.7 standard.
            Word between '#' and first non-letter-nor-digit char will be treat as a hashtag declaration.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.PostCmd.contentLang">
            <summary>
            content language like 'en-US', 'de', 'ja', 'zh-CN'. as a reference value to help language auto detect.
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.UserInfoCmd">
            <summary>
            one bazar user
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserInfoCmd.publicKey">
            <summary>
            publicKey that everyone can see
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserInfoCmd.userName">
            <summary>
            user can set a name to display
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserInfoCmd.biography">
            <summary>
            biography of this user
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserInfoCmd.location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserInfoCmd.website">
            <summary>
            website
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Commands.UserPicCmd">
            <summary>
            user avatar pic
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Commands.UserPicCmd.pic">
            <summary>
            base64 encoded user picture. string length 50KB at most.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.FailureCommand.commandID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.FailureCommand.command">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.FailureCommand.failTime">
            <summary>
            timeMillis
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.FailureCommand.errMsg">
            <summary>
            
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.UserCommand">
            <summary>
            event of users action
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.commandID">
            <summary>
            uniqueID of this command
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.commandTime">
            <summary>
            seconds since EPOCH. peer declared sending time. may not be true.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.userID">
            <summary>
            who initiative this action
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.commandType">
            <summary>
            Post, Following, Repost, Like, Delete, etc...
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.version">
            <summary>
            Added since v0.2. empty means "v0.1". 
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.commandContent">
            <summary>
            origin user request body string
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.signature">
            <summary>
            signature of commandContent.
            signed by user with privateKey. can be verified by user publicKey.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.receiveTime">
            <summary>
            when this server receive this command, timemilli
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserCommand.receiveOffset">
            <summary>
            offset of this command in this server
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.IStoreData">
            <summary>
            Indicate this is a model class for storage. Usually for MongoDB.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.BaseUrl">
            <summary>
            such as https://api.yourdoman.com/bazar/
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.Reputation">
            <summary>
            1 is max
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.ReceiveCount">
            <summary>
            receive command count from peer. include dup and error
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.ReceiveDupCount">
            <summary>
            already received from user or other peer
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.ReceiveErrorCount">
            <summary>
            fail deserialize, no user, signature fail, spam fail, etc
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.ReceiveOkCount">
            <summary>
            receive command count from peer. effective ones only.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.lastReceiveOffset">
            <summary>
            offset of ReceiveTime for this peer
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PeerServer.nextRetrieveTime">
            <summary>
            Time of next retrieve. Every OK-msg will postpon this time, to prevent too much effective msg.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Bookmark.postID">
            <summary>
            
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.Like">
            <summary>
            userID+postID is unique
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Like.postID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.postID">
            <summary>
            unique ID of a post. reply/repost are also post. 
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.threadID">
            <summary>
            postID of the original post
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.replyTo">
            <summary>
            postID of which we reply to. we can reply to an original post or a reply
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.isRepost">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.content">
            <summary>
            content of a post. RTF 1.7 standard.
            Word between '#' and first non-letter-nor-digit char will be treat as a tag declaration.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.contentLang">
            <summary>
            content language like 'en-US', 'de', 'ja', 'zh-CN'. as a reference value to help language auto detect.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.foldingText">
            <summary>
            if this field is not empty, keep content/media be folded until user click 'expand'
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.mediaType">
            <summary>
            image, video, gif, etc...
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.mediaUrls">
            <summary>
            1 video/gif or at most 4 images. split by char \x001
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Post.deleted">
            <summary>
            deleted posts need to stay in system, for display purpose.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostMeta.receiveCreate">
            <summary>
            when create-command is received.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostMeta.createFrom">
            <summary>
            server BaseUrl or client IP, where this create-command receive from.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostMeta.receiveDelete">
            <summary>
            when delete-command is received
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostMeta.deleteFrom">
            <summary>
            server BaseUrl or client IP, where this delete-command receive from.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostMeta.inheritPosts">
            <summary>
            parent postID, grand-parent postID, etc. separated by ',' end without ','
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.PostStatistic">
            <summary>
            statistic of post
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostStatistic.postID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostStatistic.replyCount">
            <summary>
            count of replies
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostStatistic.repostCount">
            <summary>
            count of reposts
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.PostStatistic.likeCount">
            <summary>
            count of likes
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.Channel">
            <summary>
            group of users. like channel in telegram or list in twitter. 
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Channel.channelID">
            <summary>
            uniqueID of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Channel.channelName">
            <summary>
            displayName of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Channel.description">
            <summary>
            
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.ChannelMember">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.ChannelMember.userID">
            <summary>
            who send this command
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.ChannelMember.cmID">
            <summary>
            uniqueID of this channel-member relationship
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.ChannelMember.channelID">
            <summary>
            uniqueID of this Channel
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.ChannelMember.memberID">
            <summary>
            whom to add to this channel
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.Following">
            <summary>
            userID+targetID is unique.
            targetType is a describe info of targetID.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.Following.targetType">
            <summary>
            "User" or "Channel"
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyGetTime.userID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyGetTime.getTime">
            <summary>
            timeMillis
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.notifyID">
            <summary>
            uniqueID of this notification.
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.userID">
            <summary>
            who will receive this notify
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.notifyTime">
            <summary>
            in milli seconds
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.notifyType">
            <summary>
            including "Like", "Reply", "Mention", "Follow", "AddList", etc
            like is from user to post.
            mention is from current post, to related inherit post or empty
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.fromWho">
            <summary>
            whose action cause this notification
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.NotifyMessage.fromWhere">
            <summary>
            postID if type = 'Like'
            postID if type = 'Reply'
            postID if type = 'Mention'
            empty if type = 'Follow'
            listID if type = 'AddList'
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.UserInfo">
            <summary>
            one bazar user
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.publicKey">
            <summary>
            publicKey that everyone can see
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.userName">
            <summary>
            user can set a name to display
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.biography">
            <summary>
            biography of this user
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.location">
            <summary>
            location
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.website">
            <summary>
            website
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserInfo.createTime">
            <summary>
            when this account created
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.UserPic">
            <summary>
            user avatar pic
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserPic.pic">
            <summary>
            base64 encoded user picture. string length 50KB at most.
            </summary>
        </member>
        <member name="T:BazarServer.Entity.Storage.UserStatistic">
            <summary>
            statistic of user
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserStatistic.userID">
            <summary>
            
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserStatistic.postCount">
            <summary>
            count of posts
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserStatistic.likedCount">
            <summary>
            count of liked (of posts)
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserStatistic.followingCount">
            <summary>
            count of following
            </summary>
        </member>
        <member name="P:BazarServer.Entity.Storage.UserStatistic.followedCount">
            <summary>
            count of be followed
            </summary>
        </member>
    </members>
</doc>
